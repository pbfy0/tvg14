// Generated by CoffeeScript 1.7.1
var $, Block, Game, ScrollContainer, game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$ = document.getElementById.bind(document);

Block = (function(_super) {
  __extends(Block, _super);

  Block.pixel = PIXI.Texture.fromImage('img/pixel.bmp');

  function Block(x, y, width, height, tint) {
    this.width = width;
    this.height = height;
    this.tint = tint;
    Block.__super__.constructor.call(this, Block.pixel);
    this.position.set(x, y);
  }

  return Block;

})(PIXI.Sprite);

ScrollContainer = (function(_super) {
  __extends(ScrollContainer, _super);

  function ScrollContainer(stage) {
    this.stage = stage;
    ScrollContainer.__super__.constructor.call(this);
    this.stage.addChild(this);
  }

  ScrollContainer.prototype.setView = function(x, y) {
    return this.position.set(-x, -y);
  };

  ScrollContainer.prototype.scroll = function(dx, dy) {
    if (dx == null) {
      dx = 0;
    }
    if (dy == null) {
      dy = 0;
    }
    this.position.x += dx;
    return this.position.y += dy;
  };

  return ScrollContainer;

})(PIXI.DisplayObjectContainer);

Game = (function() {
  Game.viewportSize = 512;

  function Game(el) {
    this.stage = new PIXI.Stage(0x222222);
    this.renderer = PIXI.autoDetectRenderer(Game.viewportSize, Game.viewportSize, el);
    this.scroller = new PIXI.DisplayObjectContainer();
    this.stage.addChild(this.scroller);
    this.level = new PIXI.DisplayObjectContainer();
    this.scroller.addChild(this.level);
    this.animate(this);
  }

  Game.prototype.animate = function(scope) {
    requestAnimFrame(function() {
      return scope.animate(scope);
    });
    return this.renderer.render(this.stage);
  };

  Game.prototype.loadLevel = function(filename) {
    var child, xhr, _i, _len, _ref;
    _ref = this.level.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      level.removeChild(child);
    }
    xhr = new XMLHttpRequest();
    xhr.open('GET', filename, true);
    xhr.addEventListener('load', function(event) {
      var block, blocks, el, json, _j, _len1, _results;
      json = JSON.parse(xhr.responseText);
      blocks = json.blocks;
      _results = [];
      for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
        el = blocks[_j];
        block = new Block(el[0], el[1], el[2], el[3], parseInt(el[4].substring(1), 16));
        _results.push(level.addChild(block));
      }
      return _results;
    });
    return xhr.send();
  };

  return Game;

})();

game = void 0;

document.addEventListener('DOMContentLoaded', function() {
  return game = new Game($('game'));
});
