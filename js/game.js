// Generated by CoffeeScript 1.7.1
var $, Block, Game, Level, Player, ScrollContainer, game,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$ = document.getElementById.bind(document);

PIXI.DisplayObjectContainer.prototype.bounds = function() {
  var r;
  r = new PIXI.Rectangle;
  r.x = this.position.x - this.anchor.x * this.width;
  r.y = this.position.y - this.anchor.y * this.height;
  r.width = this.width;
  r.height = this.height;
  return r;
};

Block = (function(_super) {
  __extends(Block, _super);

  Block.pixel = PIXI.Texture.fromImage('img/pixel.bmp');

  function Block(x, y, width, height, tint) {
    Block.__super__.constructor.call(this, Block.pixel);
    this.anchor.set(0, 1);
    this.width = width;
    this.height = height;
    this.tint = tint;
    this.position.set(x, y);
  }

  return Block;

})(PIXI.Sprite);

Player = (function(_super) {
  __extends(Player, _super);

  Player.texture = PIXI.Texture.fromImage('img/person.png');

  function Player(game) {
    this.game = game;
    Player.__super__.constructor.call(this, Player.texture);
    this.anchor.set(0, 1);
    this.vx = 0;
    this.vy = 0;
    this.g = 0.5;
    this.initKeys();
    this.onground = false;
  }

  Player.prototype.initKeys = function() {
    var scope;
    scope = this;
    Mousetrap.bind(['a', 'left'], function() {
      return scope.vx = -2;
    });
    Mousetrap.bind(['d', 'right'], function() {
      return scope.vx = 2;
    });
    Mousetrap.bind(['a', 'd', 'left', 'right'], (function() {
      return scope.vx = 0;
    }), 'keyup');
    return Mousetrap.bind(['w', 'up'], function() {
      if (scope.onground) {
        scope.vy = -10;
        return scope.onground = false;
      }
    });
  };

  Player.prototype.update = function() {
    var cell, cell2, ox, oy, _ref;
    _ref = [this.position.x, this.position.y], ox = _ref[0], oy = _ref[1];
    cell = this.game.level.containingCell(this);
    if (!this.onground) {
      this.vy += this.g;
    }
    this.position.x += this.vx;
    this.position.y += this.vy;
    cell2 = this.game.level.containingCell(this);
    if ((cell2 == null) || (cell !== cell2 && cell.tint !== cell2.tint)) {
      this.position.y = oy;
      this.vy = 0;
      return this.onground = true;
    }
  };

  return Player;

})(PIXI.Sprite);

ScrollContainer = (function(_super) {
  __extends(ScrollContainer, _super);

  function ScrollContainer(parent) {
    ScrollContainer.__super__.constructor.call(this);
    parent.addChild(this);
  }

  ScrollContainer.prototype.setView = function(x, y) {
    return this.position.set(-x, -y);
  };

  ScrollContainer.prototype.scroll = function(dx, dy) {
    if (dx == null) {
      dx = 0;
    }
    if (dy == null) {
      dy = 0;
    }
    this.position.x -= dx;
    return this.position.y -= dy;
  };

  return ScrollContainer;

})(PIXI.DisplayObjectContainer);

Level = (function(_super) {
  __extends(Level, _super);

  function Level(parent) {
    Level.__super__.constructor.call(this);
    parent.addChild(this);
  }

  Level.prototype.containingCell = function(doc) {
    var b, cell, r, x1, x2, y1, y2, _i, _items, _len, _ref, _ref1;
    r = doc.bounds();
    _ref = [r.x, r.y, r.x + r.width, r.y + r.height], x1 = _ref[0], y1 = _ref[1], x2 = _ref[2], y2 = _ref[3];
    _items = [];
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      cell = _ref1[_i];
      b = cell.bounds();
      if (b.contains(x1, y1) && b.contains(x2, y1) && b.contains(x1, y2) && b.contains(x2, y2)) {
        _items.push(cell);
      }
    }
    return _items;
  };

  return Level;

})(PIXI.DisplayObjectContainer);

Game = (function() {
  Game.viewportSize = 512;

  function Game(el) {
    this.stage = new PIXI.Stage(0x222222);
    this.renderer = PIXI.autoDetectRenderer(Game.viewportSize, Game.viewportSize, el);
    this.scroller = new ScrollContainer(this.stage);
    this.level = new Level(this.scroller);
    this.player = new Player(this);
    this.scroller.addChild(this.player);
    this.animate(this);
  }

  Game.prototype.animate = function(scope) {
    requestAnimFrame(function() {
      return scope.animate(scope);
    });
    scope.player.update();
    return this.renderer.render(this.stage);
  };

  Game.prototype.loadLevel = function(filename) {
    var child, scope, xhr, _i, _len, _ref;
    _ref = this.level.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      this.level.removeChild(this.level.children[0]);
    }
    scope = this;
    xhr = new XMLHttpRequest();
    xhr.open('GET', filename, true);
    xhr.addEventListener('load', function(event) {
      var block, blocks, e2, el, json, x, _j, _len1;
      json = JSON.parse(xhr.responseText);
      blocks = json.blocks;
      for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
        el = blocks[_j];
        e2 = (function() {
          var _k, _len2, _ref1, _results;
          _ref1 = el.slice(0, 4);
          _results = [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            x = _ref1[_k];
            _results.push(64 * x);
          }
          return _results;
        })();
        block = new Block(e2[0], Game.viewportSize - e2[1], e2[2], e2[3], parseInt(el[4].substring(1), 16));
        scope.level.addChild(block);
      }
      return scope.player.position.set(json.entrance[0] * 64, Game.viewportSize - (json.entrance[1] * 64));
    });
    return xhr.send();
  };

  return Game;

})();

game = void 0;

document.addEventListener('DOMContentLoaded', function() {
  return game = new Game($('game'));
});
